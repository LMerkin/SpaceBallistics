// vim:syntax=cpp:ts=2:et
/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  v2112 (or your installed version)     |
|   \\  /    A nd           | Web:      www.openfoam.com                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
  version     2.0;
  format      ascii;
  arch        "LSB;label=32;scalar=64";
  class       dictionary;
  location    "system";
  object      fvSchemes;
}
//===========================================================================//
// Time schemes:
ddtSchemes
{
    // Steady-state simulation: No time evolution:
    default         steadyState;
}

// Gradient schemes:
gradSchemes
{
    // Alt:         cellLimited Gauss linear 1;
    default         Gauss linear;

    grad(p)         leastSquares;
    // Alt:         cellLimited Gauss linear 0.333;

    grad(h)         Gauss linear;
    // Alt:         cellLimited Gauss linear 0.333;
}

// Divergence schemes:
divSchemes
{
    default         none;

    div(phi,U)      Gauss limitedLinearV 1;
    // Alt:         bounded Gauss vanLeerV 1;

    div(phi,K)      Gauss upwind;
    // Alt:         bounded Gauss limitedLinear 1;

    div(phi,h)      Gauss upwind;
    // Alt:         bounded Gauss limitedLinear 1;

    div(phid,p)     bounded Gauss limitedLinear 1;
    // ???

    // Others:
    div(phi,alpha)  Gauss upwind;
    div(phi,k)      Gauss upwind;
    div(phi,omega)  Gauss upwind;

    // Viscous stress term (since we model the turbulence effects):
    div((muEff*dev(T(grad(U)))))        Gauss linear;
    div(((rho*nuEff)*dev2(T(grad(U))))) Gauss linear;
}

// Laplacian schemes:
laplacianSchemes
{
    default         Gauss linear corrected;
    // Alt:         Gauss linear limited 1;
}

// Interpolation schemes:
interpolationSchemes
{
    default         linear;
}

// SnGrad schemes:
snGradSchemes
{
    // XXX: The following is more stable in case of shock waves:
    default         limited 1;
}

// Wall distance calculation:
wallDist
{
    method          meshWave;
}
